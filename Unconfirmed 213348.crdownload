#!/usr/bin/env python
# coding: utf-8

# In[1]:


#load the libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns


# In[2]:


data = pd.read_csv("data_clean.csv")
print(data)


# In[3]:


# Printing the information 
data.info()


# In[4]:


# Dataframe attributes
print(type(data))
print(data.shape)
print(data.size)


# In[5]:


# Drop dupplicate column( Temp C) and Unnamed column

# data1 = data.drop(['Unnamed: 0',"Temp C"], axis =1, inplace = True)
data1 = data.drop(['Unnamed: 0',"Temp C"], axis =1)
data1


# In[6]:


data1.info()


# In[7]:


# Convert the Month column data type to float data type

data1['Month']=pd.to_numeric(data['Month'],errors='coerce')
data1.info()


# In[8]:


# Print all duplicated rows
data1[data1.duplicated(keep = False)]


# In[9]:


# Checking for duplicated rows in the table
#Print only the duplicated row (one) only
data1[data1.duplicated()]


# In[10]:


# Drop duplicated rows
data1.drop_duplicates(keep='first', inplace = True)
data1


# In[11]:


# Change column names (Rename the columns)
data1.rename({'Solar.R': 'Solar'}, axis=1, inplace = True)
data1


# In[12]:


# Find the mode values of categorical column (weather)
print(data1["Weather"].value_counts())
mode_weather = data1["Weather"].mode()[0]
print(mode_weather)


# #### Impute the missing values

# In[13]:


# input missing values (Replace NaN with mode etc.) of "weather" using fillna()
data1["Weather"] = data ["Weather"].fillna(mode_weather)
data1.isnull().sum()


# In[14]:


# Find the mode values of categorical column (month)
print(data1["Month"].value_counts())
mode_month = data1["Month"].mode()[0]
print(mode_month)


# In[15]:


# input missing values (Replace NaN with mode etc.) of "month" using fillna()
data1["Month"] = data ["Month"].fillna(mode_month)
data1.isnull().sum()


# In[16]:


# Reset the index column
data1.reset_index(drop=True)


# In[17]:


#Create a figure with two subplots ,stacked vertically
fig, axes=plt.subplots(2, 1, figsize=(8, 6), gridspec_kw={'height_ratios':[1, 3]})
#Plot the boxplot in the first (top) subplot
sns.boxplot(data=data1["Ozone"], ax=axes[0],color='skyblue',width=0.5, orient='h')
axes[0].set_title("Boxplot")
axes[0].set_xlabel("Ozone Levels")

#Plot the histogram with KDE Curve in the second (bottom) subplot
sns.histplot(data1["Ozone"], kde=True, ax=axes[1],color='purple',bins=30)
axes[1].set_title("Histogram with KDE")
axes[1].set_xlabel("Ozone Levels")
axes[1].set_ylabel("Frequency")
 
#Adjust layout for better spacing
plt.tight_layout()

#Show the plot
plt.show()


# In[18]:


# create a figire for violin plot

sns.violinplot(data=data1["Ozone"], color='lightgreen')
plt.title("violin plot")


# In[19]:


#Create a figure with two subplots ,stacked vertically
fig, axes=plt.subplots(2, 1, figsize=(8, 6), gridspec_kw={'height_ratios':[1, 3]})
#Plot the boxplot in the first (top) subplot
sns.boxplot(data=data1["Solar"], ax=axes[0],color='skyblue',width=0.5, orient='h')
axes[0].set_title("Boxplot")
axes[0].set_xlabel("Solar Levels")

#Plot the histogram with KDE Curve in the second (bottom) subplot
sns.histplot(data1["Solar"], kde=True, ax=axes[1],color='purple',bins=30)
axes[1].set_title("Histogram with KDE")
axes[1].set_xlabel("Solar Levels")
axes[1].set_ylabel("Frequency")
 
#Adjust layout for better spacing
plt.tight_layout()

#Show the plot
plt.show()


# In[20]:


#Extract outliers from boxplot for ozone column
plt.figure(figsize=(6,2))
boxplot_data = plt.boxplot(data1["Ozone"], vert=False)
[item.get_xdata() for item in boxplot_data['fliers']]


# In[21]:


data["Ozone"].describe()


# In[22]:


mu = data1["Ozone"].describe()[1]
sigma = data1["Ozone"].describe()[2]

for x in data1["Ozone"]:
    if ((x < (mu - 3*sigma)) or (x > (mu + 3*sigma))):
        print(x)


# In[23]:


# Quantile-Quantile plot for detection of outliers
import scipy.stats as stats
#Create Q-Q plot
plt.figure(figsize=(8, 6))
stats.probplot(data1["Ozone"], dist='norm', plot=plt)
plt.title("Q-Q plot for outliers detection", fontsize=14)
plt.xlabel("Theoretical Quantiles", fontsize=12)


# In[24]:


#Plot Q-Q plot for solar column
# Quantile-Quantile plot for detection of outliers
import scipy.stats as stats
#Create Q-Q plot
plt.figure(figsize=(8, 6))
stats.probplot(data1["Solar"], dist='norm', plot=plt)
plt.title("Q-Q plot for outliers detection", fontsize=14)
plt.xlabel("Theoretical Quantiles", fontsize=12)


# In[25]:


#Create a figure for viloin plot
sns.violinplot(data=data["Ozone"],color='lightgreen')
plt.title("violin Plot")
#Show the plot
plt.show()


# In[26]:


sns.swarmplot(data=data1,x="Weather",y="Ozone",color="orange",palette="Set2",size=6)


# In[27]:


sns.stripplot(data=data1,x="Weather",y="Ozone",color="orange",palette="Set1", size=6, jitter = True)


# In[28]:


sns.kdeplot(data=data1["Ozone"],fill=True,color="blue")
sns.rugplot(data=data1["Ozone"],color="black")


# In[29]:


#Category wise boxplot for ozone
sns.boxplot(data=data1,x="Weather",y="Ozone")


# In[30]:


plt.scatter(data1["Wind"], data1["Temp"])


# In[31]:


data1["Wind"].corr(data1["Temp"])


# In[32]:


data1["Wind"].corr(data1["Temp"])


# In[33]:


data1.info()


# In[34]:


data1_numeric = data1.iloc[:,[0,1,2,6]]
data1_numeric


# In[35]:


data1_numeric.corr()


# ## Observations
#     Highest correlation strength is observed between Ozone and Temperature(0.596304)
#     The next higher correlation is observed between Ozone and wind(-536616)
#     The next higher correlation strength is observed between wind and Temperature(--0.441247)
#     The least correlation strength is observed between solar nd wind(-0.031312)

# In[36]:


sns.pairplot(data1_numeric)


# In[37]:


sns.pairplot(data1_numeric)


# In[38]:


data2=pd.get_dummies(data1,columns=['Month','Weather'])
data2


# In[39]:


data1_numeric.values


# In[40]:


from numpy import set_printoptions
from sklearn.preprocessing import MinMaxScaler

array = data1_numeric.values

scaler = MinMaxScaler(feature_range=(0,1))
rescaledX = scaler.fit_transform(array)

set_printoptions(precision=2)
print(rescaledX[0:10,:])


# In[ ]:




