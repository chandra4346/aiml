#!/usr/bin/env python
# coding: utf-8

# ### Multiple Linear Regression
# 
# Assumptions in Multilinear Regression
# 
# 1. Linearity: The ralationship between the predictiors and the response is linear
# 2. Independence: Observations are independent of each other.
# 3. Homoscadasticity: The residuals(Y - Y_hat) exhibit constant variance at all levels of the predictor.
# 4. Normal Distribution of Errors: the residuals of the model are normally distributed.
# 5. No multicollinearity: The independent variables should not be too highly correlated eith each other.

# In[1]:


import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns 
import statsmodels.formula.api as smf
from statsmodels.graphics.regressionplots import influence_plot
import numpy as np


# In[2]:


#Read the data from csv file
cars =pd.read_csv("Cars.csv")
cars.head()


# In[3]:


# Rearange the columns
cars =pd.DataFrame(cars, columns=["HP","VOL","SP","WT","MPG"])
cars.head()


# ## Description of columns
#  - MPG: Milege of the car (MIle per Gallon)(This is Y-colums to be predicted)
#  - HP:Horse Power of the car(X1 column)
#  - VOL: Volume of the car (size)(X2 Column)
#  - SP: Top speed of the car (Miles per Hour)(X3 column)
#  - WT : Weight of the car(Pounds)(X4 column)

# In[4]:


cars.info()


# In[5]:


# Check for missing values
cars.isna().sum()


# #### Observations
#  - There are no missing values
#  - There are 81 observations (81 different cars data)
#  - The data types of the columns are also relevant and valid

# In[6]:


#Create a figure with two subplots (one above the other)
fig, (ax_box, ax_hist)=plt.subplots(2, sharex=True, gridspec_kw={"height_ratios":(.15, .85)})
# Create a boxplot
sns.boxplot(data=cars, x='HP', ax=ax_box, orient='h')
ax_box.set(xlabel='') #Remove x label for the boxplot 
#Create a histogram in the same x-axis
sns.histplot(data=cars, x='HP', ax=ax_hist, bins=30, kde=True, stat="density")
ax_hist.set(ylabel='Density')
#Adjust Layout
plt.tight_layout()
plt.show()


# In[7]:


#Create a figure with two subplots (one above the other)
fig, (ax_box, ax_hist)=plt.subplots(2, sharex=True, gridspec_kw={"height_ratios":(.15, .85)})
# Create a boxplot
sns.boxplot(data=cars, x='VOL', ax=ax_box, orient='h')
ax_box.set(xlabel='') #Remove x label for the boxplot 
#Create a histogram in the same x-axis
sns.histplot(data=cars, x='VOL', ax=ax_hist, bins=30, kde=True, stat="density")
ax_hist.set(ylabel='Density')
#Adjust Layout
plt.tight_layout()
plt.show()


# In[8]:


#Create a figure with two subplots (one above the other)
fig, (ax_box, ax_hist)=plt.subplots(2, sharex=True, gridspec_kw={"height_ratios":(.15, .85)})
# Create a boxplot
sns.boxplot(data=cars, x='SP', ax=ax_box, orient='h')
ax_box.set(xlabel='') #Remove x label for the boxplot 
#Create a histogram in the same x-axis
sns.histplot(data=cars, x='SP', ax=ax_hist, bins=30, kde=True, stat="density")
ax_hist.set(ylabel='Density')
#Adjust Layout
plt.tight_layout()
plt.show()


# In[9]:


#Create a figure with two subplots (one above the other)
fig, (ax_box, ax_hist)=plt.subplots(2, sharex=True, gridspec_kw={"height_ratios":(.15, .85)})
# Create a boxplot
sns.boxplot(data=cars, x='WT', ax=ax_box, orient='h')
ax_box.set(xlabel='') #Remove x label for the boxplot 
#Create a histogram in the same x-axis
sns.histplot(data=cars, x='WT', ax=ax_hist, bins=30, kde=True, stat="density")
ax_hist.set(ylabel='Density')
#Adjust Layout
plt.tight_layout()
plt.show()


# ### Observations from boxplot ans histograms
# - There are some extreme values (outliers) observed in toe=wards the right tail os SP and HP distributions.
# - In VOL and WT columns , a few outliers are observed in both tails of their distributions.
# - The exrtreme values of cars data may have come from the specially designed nature of cars
# - As this is multi-dimensional data, the outliers with respect to spatial dimensions may have to be considersd while building the regression model
# 1. HP and SP have a strong positive correlation (0.973848),** indicating that as horsepower (HP) increases, speed (SP) also increases.  
# 
# 2. **MPG has a negative correlation with all other variables, especially HP (-0.725038) and SP (-0.687125),** suggesting that higher horsepower and speed result in lower miles per gallon (MPG).

# ### Chesking for duplicated rows

# In[10]:


cars[cars.duplicated()]


# ### Pair plots and Correlation Coefficients

# In[11]:


#Pair plot
sns.set_style(style='darkgrid')
sns.pairplot(cars)


# In[12]:


cars.corr()


# ###  Observations
# - WT Vs VOL has hishest correlation that is 0.999203 which is equals to 1
# - HP and SP has strong positive correlation that is 0.973848
# - and in that indicates HP increase SP also Increases
# 

# ### Observations from correlation plots and Coeffcients
# - Between x and y, all the x variables are showing oderate to igh correlation strengths, highest being between HP and MPG
# - Therefore this dataset qualifies for building a multiple linear regresion model to predict MPG
# - Among x columns (x1,x2,x3 and x4), some very high correlation strengths are observed between SP vs HP, VOL vs WT
# - The high correlation among x columns is not desirable as it might lead to multicollinearity problem

# ### Preparing a preliminary model considering all X columns

# In[13]:


#Build model
#import statsmodels.formula.api as smf
model=smf.ols('MPG~WT+VOL+SP+HP',data=cars).fit()


# In[14]:


model.summary()


# ### Observations from model summary
# - The R-squared and adjusted R-Swuared values are good about 75% of variability in Y is explained by X columns
# - The probability value with respect to F-statistic is close to zero, indiacting that all or some of X columns are significant
# - The p-values for VOL and WT are higher than 5% indicating some interaction issue among themselves, which need to be further explored

# In[15]:


df1 = pd.DataFrame()
df1["actual_y1"] = cars["MPG"]
df1.head()


# In[16]:


pred_y1 = model.predict(cars.iloc[:,0:4])
df1["pred_y1"] = pred_y1
df1.head()


# In[17]:


# Compute the mean squared Error (MSE) for model1
from sklearn.metrics import mean_squared_error
print("MSE :", mean_squared_error(df1["actual_y1"], df1["pred_y1"]))


# In[18]:


pred_y1 = model.predict(cars.iloc[:,0:4])
df1["pred_y1"] = pred_y1
df1.head()


# In[19]:


from sklearn.metrics import mean_squared_error
mse = mean_squared_error(df1["actual_y1"], df1["pred_y1"])
print("MSE :", mse )
print("RMSE :",np.sqrt(mse))


# In[20]:


# Compute VIF values
rsq_hp = smf.ols('HP~WT+VOL+SP',data=cars).fit().rsquared
vif_hp = 1/(1-rsq_hp)

rsq_wt = smf.ols('WT~HP+VOL+SP',data=cars).fit().rsquared
vif_wt = 1/(1-rsq_wt)

rsq_vol = smf.ols('VOL~WT+SP+HP',data=cars).fit().rsquared
vif_vol = 1/(1-rsq_vol)

rsq_sp = smf.ols('SP~WT+VOL+HP',data=cars).fit().rsquared
vif_sp = 1/(1-rsq_sp)

# Storing vif values in a data frame
d1 = {'Variables' : ['Hp' ,'WT' , 'VOL' ,'SP' ], 'VIF' : [vif_hp,vif_wt, vif_vol, vif_sp]}
Vif_frame = pd.DataFrame(d1)
Vif_frame


# Observations:
# The idela range of VIF values shall be between 0 to 10.However slightly higher values can be tolerated
# As seen from the very high VIF values for VOL and WT,it is clear that they are prone to multicollinearity proble.
# Hence it is decided to drop one columns (either VOL or WT) to overcome the muticollinearity.
# It is decided to drop WT and retain column in further models.

# In[21]:


cars1=cars.drop("WT",axis=1)
cars1.head()


# In[22]:


import statsmodels.formula.api as smf
model = smf.ols('MPG~VOL+SP+HP',data=cars1).fit()


# In[23]:


model.summary()


# In[24]:


df2 = pd.DataFrame()
df2["actual_y2"] = cars["MPG"]
df2.head()


# In[25]:


pred_y2 = model.predict(cars.iloc[:,0:4])
df2["pred_y2"] = pred_y2
df2.head()


# In[26]:


from sklearn.metrics import mean_squared_error
mse = mean_squared_error(df2["actual_y2"], df2["pred_y2"])
print("MSE :", mse )
print("RMSE :",np.sqrt(mse))


# . The adjusted R-suared value improved slightly to 0.76
# . All the p-values for model parametersa re less than 5% hence they are significant
# . Therefore the HP, VOL, SP columns are finalized as the significant predictor for the MPG response vriabl
# . There is no improvement in MSE value

# 

# #### Leverage (Hat Values):
# Leverage values diagnose if a data point has an extreme value in terms of the independent variables. A point with high leverage has a great ability to influence the regression line. The threshold for considering a point as having high leverage is typically set at 3(k+1)/n, where k is the number of predictors and n is the sample size.

# In[31]:


k = 3
n = 81
leverage_cutoff = 3*((k+1)/n)
leverage_cutoff


# In[30]:


from statsmodels.graphics.regressionplots import influence_plot
influence_plot(model,alpha=.05)
y=[i for i in range(-2,8)]
x=[leverage_cutoff for i in range(10)]
plt.plot(x,y,'r+')
plt.show()


# In[32]:


cars1[cars1.index.isin([65,70,76,78,79,80])]


# In[34]:


cars2=cars1.drop(cars1.index[[65,70,76,78,79,80]],axis=0).reset_index(drop=True)
cars2


# In[35]:


# Rebuild the model model
model3=smf.ols('MPG~VOL+SP+HP',data=cars2).fit()


# In[36]:


model3.summary()


# In[43]:


df3= pd.DataFrame()
df3["actual_y3"] =cars2["MPG"]
df3.head()


# In[44]:


pred_y3 = model3.predict(cars2.iloc[:,0:3])
df3["pred_y3"] = pred_y3
df3.head()


# In[45]:


from sklearn.metrics import mean_squared_error
mse=mean_squared_error(df3["actual_y3"],df3["pred_y3"])
print("MSE :",mse)
print("RMSE :",np.sqrt(mse))


# In[ ]:




